https://docs.google.com/document/d/1wEfnD9VAVmOmlK6wKAAF7X_kVh_nBtYSZX7r25R4sOs/edit?usp=sharing

package com.wipro.service;

import com.wipro.model.Car;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CarService {
    // returns sum of prices of all the cars in the list
    public double getSumOfPrices(List<Car> carList) {
        return carList.stream()
                .mapToDouble(Car::getPrice)
                .sum();
    }

    // returns list of all car names
    public List<String> getCarNames(List<Car> carList) {
        return carList.stream()
                .map(Car::getCarName)
                .collect(Collectors.toList());
    }

    // returns Cars in the range of 8 Lakhs to 15 Lakhs
    public List<Car> getCarsInRange(List<Car> carList) {
        return carList.stream()
                .filter(car -> car.getPrice() >= 800000 && car.getPrice() <= 1500000)
                .collect(Collectors.toList());
    }

    // returns car which has least price
    public Car getLowestCar(List<Car> carList) {
        return carList.stream()
                .min(Comparator.comparingDouble(Car::getPrice))
                .orElse(null);
    }

    // returns List of Cars in the descending order of price
    public List<Car> getSortedCars(List<Car> carList) {
        return carList.stream()
                .sorted(Comparator.comparingDouble(Car::getPrice).reversed())
                .collect(Collectors.toList());
    }
}


package com.wipro.app;

import com.wipro.model.Car;
import com.wipro.service.CarService;

import java.util.Arrays;
import java.util.List;

public class Tester {
    public static void main(String[] args) {
        Car car1 = new Car("Toyota", "Corolla", 950000.0);
        Car car2 = new Car("Honda", "Civic", 1200000.0);
        Car car3 = new Car("Hyundai", "Elantra", 1400000.0);
        Car car4 = new Car("Maruti", "Alto", 500000.0);

        List<Car> carList = Arrays.asList(car1, car2, car3, car4);

        CarService carService = new CarService();

        System.out.println("Sum of Prices: " + carService.getSumOfPrices(carList));
        System.out.println("Car Names: " + carService.getCarNames(carList));
        System.out.println("Cars in Range (8 Lakhs to 15 Lakhs): " + carService.getCarsInRange(carList));
        System.out.println("Car with Lowest Price: " + carService.getLowestCar(carList));
        System.out.println("Cars Sorted by Price (Descending): " + carService.getSortedCars(carList));
    }
}

    private static List<Person> sortedPersons(List<Person> personList) {
        return personList.stream()
                .sorted((p1, p2) -> p1.getName().compareTo(p2.getName()))
                .toList();
    }
    
    private static Map<String, Integer> getPersonCountByCity(List<Person> personList) {
        return personList.stream()
                .collect(Collectors.groupingBy(Person::getAddress, Collectors.summingInt(p -> 1)));
    }

 System.out.println("City-wise person count...");
        cityMap.forEach((city, count) -> System.out.println(city + " : " + count));


---------------------------------------------------------------


 public List<Person> getAllPersons() throws SQLException {
        String sql = "SELECT * FROM person";
        List<Person> personList = new ArrayList<>();
        
        try (
            Connection connection = OracleConnection.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
        ) {
            while (resultSet.next()) {
                Person person = new Person();
                person.setAdharCard(resultSet.getLong("adharCard"));
                person.setName(resultSet.getString("name"));
                person.setGender(Gender.valueOf(resultSet.getString("gender")));
                person.setBirthdate(resultSet.getDate("birthdate").toLocalDate());
                person.setAddress(resultSet.getString("address"));
                person.setMobile(resultSet.getLong("mobile"));
                personList.add(person);
            }
        } catch (SQLException e) {
            throw e;
        }
        
        return personList;
    }


    private static void displayAllPersons() {
        try {
            List<Person> personList = personService.getAllPersons();
            for (Person person : personList) {
                System.out.println("AdharCard: " + person.getAdharCard());
                System.out.println("Name: " + person.getName());
                System.out.println("Gender: " + person.getGender());
                System.out.println("Birthdate: " + person.getBirthdate());
                System.out.println("Address: " + person.getAddress());
                System.out.println("Mobile: " + person.getMobile());
                System.out.println("---------------------------------");
            }
        } catch (PersonException e) {
            e.printStackTrace();
        }
    }

