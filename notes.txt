https://docs.google.com/document/d/1wEfnD9VAVmOmlK6wKAAF7X_kVh_nBtYSZX7r25R4sOs/edit?usp=sharing

package com.wipro.service;

import com.wipro.model.Car;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CarService {
    // returns sum of prices of all the cars in the list
    public double getSumOfPrices(List<Car> carList) {
        return carList.stream()
                .mapToDouble(Car::getPrice)
                .sum();
    }

    // returns list of all car names
    public List<String> getCarNames(List<Car> carList) {
        return carList.stream()
                .map(Car::getCarName)
                .collect(Collectors.toList());
    }

    // returns Cars in the range of 8 Lakhs to 15 Lakhs
    public List<Car> getCarsInRange(List<Car> carList) {
        return carList.stream()
                .filter(car -> car.getPrice() >= 800000 && car.getPrice() <= 1500000)
                .collect(Collectors.toList());
    }

    // returns car which has least price
    public Car getLowestCar(List<Car> carList) {
        return carList.stream()
                .min(Comparator.comparingDouble(Car::getPrice))
                .orElse(null);
    }

    // returns List of Cars in the descending order of price
    public List<Car> getSortedCars(List<Car> carList) {
        return carList.stream()
                .sorted(Comparator.comparingDouble(Car::getPrice).reversed())
                .collect(Collectors.toList());
    }
}


package com.wipro.app;

import com.wipro.model.Car;
import com.wipro.service.CarService;

import java.util.Arrays;
import java.util.List;

public class Tester {
    public static void main(String[] args) {
        Car car1 = new Car("Toyota", "Corolla", 950000.0);
        Car car2 = new Car("Honda", "Civic", 1200000.0);
        Car car3 = new Car("Hyundai", "Elantra", 1400000.0);
        Car car4 = new Car("Maruti", "Alto", 500000.0);

        List<Car> carList = Arrays.asList(car1, car2, car3, car4);

        CarService carService = new CarService();

        System.out.println("Sum of Prices: " + carService.getSumOfPrices(carList));
        System.out.println("Car Names: " + carService.getCarNames(carList));
        System.out.println("Cars in Range (8 Lakhs to 15 Lakhs): " + carService.getCarsInRange(carList));
        System.out.println("Car with Lowest Price: " + carService.getLowestCar(carList));
        System.out.println("Cars Sorted by Price (Descending): " + carService.getSortedCars(carList));
    }
}

    private static List<Person> sortedPersons(List<Person> personList) {
        return personList.stream()
                .sorted((p1, p2) -> p1.getName().compareTo(p2.getName()))
                .toList();
    }
    
    private static Map<String, Integer> getPersonCountByCity(List<Person> personList) {
        return personList.stream()
                .collect(Collectors.groupingBy(Person::getAddress, Collectors.summingInt(p -> 1)));
    }

 System.out.println("City-wise person count...");
        cityMap.forEach((city, count) -> System.out.println(city + " : " + count));


---------------------------------------------------------------


 public List<Person> getAllPersons() throws SQLException {
        String sql = "SELECT * FROM person";
        List<Person> personList = new ArrayList<>();
        
        try (
            Connection connection = OracleConnection.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
        ) {
            while (resultSet.next()) {
                Person person = new Person();
                person.setAdharCard(resultSet.getLong("adharCard"));
                person.setName(resultSet.getString("name"));
                person.setGender(Gender.valueOf(resultSet.getString("gender")));
                person.setBirthdate(resultSet.getDate("birthdate").toLocalDate());
                person.setAddress(resultSet.getString("address"));
                person.setMobile(resultSet.getLong("mobile"));
                personList.add(person);
            }
        } catch (SQLException e) {
            throw e;
        }
        
        return personList;
    }


    private static void displayAllPersons() {
        try {
            List<Person> personList = personService.getAllPersons();
            for (Person person : personList) {
                System.out.println("AdharCard: " + person.getAdharCard());
                System.out.println("Name: " + person.getName());
                System.out.println("Gender: " + person.getGender());
                System.out.println("Birthdate: " + person.getBirthdate());
                System.out.println("Address: " + person.getAddress());
                System.out.println("Mobile: " + person.getMobile());
                System.out.println("---------------------------------");
            }
        } catch (PersonException e) {
            e.printStackTrace();
        }
    }

------------
<div class="container">
        <form id="registrationForm">
            <h2>Register</h2>
            <label for="firstName">First Name:</label>
            <input type="text" id="firstName" name="firstName" required>
            
            <label for="lastName">Last Name:</label>
            <input type="text" id="lastName" name="lastName" required>
            
            <label for="gender">Gender:</label>
            <select id="gender" name="gender" required>
                <option value="">Select Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
            </select>
            
            <label for="birthdate">Birthdate:</label>
            <input type="date" id="birthdate" name="birthdate" required>
            
            <label for="address">Address:</label>
            <input type="text" id="address" name="address" required>
            
            <label for="mobile">Mobile:</label>
            <input type="tel" id="mobile" name="mobile" pattern="[0-9]{10}" required>
            
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            
            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
            
            <button type="submit">Register</button>
        </form>
    </div>

------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Form</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h2 class="card-title text-center mb-4">Register</h2>
                        <form id="registrationForm">
                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="firstName" name="firstName" required>
                            </div>
                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" name="lastName" required>
                            </div>
                            <div class="mb-3">
                                <label for="gender" class="form-label">Gender</label>
                                <select class="form-select" id="gender" name="gender" required>
                                    <option value="">Select Gender</option>
                                    <option value="male">Male</option>
                                    <option value="female">Female</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="birthdate" class="form-label">Birthdate</label>
                                <input type="date" class="form-control" id="birthdate" name="birthdate" required>
                            </div>
                            <div class="mb-3">
                                <label for="address" class="form-label">Address</label>
                                <input type="text" class="form-control" id="address" name="address" required>
                            </div>
                            <div class="mb-3">
                                <label for="mobile" class="form-label">Mobile</label>
                                <input type="tel" class="form-control" id="mobile" name="mobile" pattern="[0-9]{10}" required>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Register</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
</body>
</html>

--------------------------------------------
<!DOCTYPE html>
<html>
<head>
    <title>Basic Calculator</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <input type="text" id="num1" class="form-control mb-3" placeholder="Enter first number">
                    <input type="text" id="num2" class="form-control mb-3" placeholder="Enter second number">
                    <button class="btn btn-primary" onclick="add()">+</button>
                    <button class="btn btn-primary" onclick="subtract()">-</button>
                    <button class="btn btn-primary" onclick="multiply()">*</button>
                    <button class="btn btn-primary" onclick="divide()">/</button>
                    <p id="result" class="mt-3">Result: </p>
                </div>
            </div>
        </div>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="script.js"></script>
</body>
</html>


---------------------------------------------------

function add() {
    let num1 = parseFloat(document.getElementById("num1").value);
    let num2 = parseFloat(document.getElementById("num2").value);
    let result = num1 + num2;
    document.getElementById("result").textContent = "Result: " + result;
}

function subtract() {
    let num1 = parseFloat(document.getElementById("num1").value);
    let num2 = parseFloat(document.getElementById("num2").value);
    let result = num1 - num2;
    document.getElementById("result").textContent = "Result: " + result;
}

function multiply() {
    let num1 = parseFloat(document.getElementById("num1").value);
    let num2 = parseFloat(document.getElementById("num2").value);
    let result = num1 * num2;
    document.getElementById("result").textContent = "Result: " + result;
}

function divide() {
    let num1 = parseFloat(document.getElementById("num1").value);
    let num2 = parseFloat(document.getElementById("num2").value);
    if (num2 === 0) {
        document.getElementById("result").textContent = "Error: Division by zero";
    } else {
        let result = num1 / num2;
        document.getElementById("result").textContent = "Result: " + result;
    }
}


--------------------------------

https://66a38c7544aa63704581a278.mockapi.io/api/v1/:endpoint

